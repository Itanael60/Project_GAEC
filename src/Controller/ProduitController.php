<?php
namespace App\Controller;

use App\Entity\Produit;
use App\Form\ProduitType;
use App\Form\RechercheType;
use App\Form\AjoutQteType;
use App\Repository\ProduitRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

use Symfony\Component\HttpFoundation\File\UploadedFile;

class ProduitController extends Controller
{
    /**
     * @Route("/produit", name="produit")
     */
    public function index()
    {
        return $this->render('produit/admin_creationProduit.html.twig', [
            'controller_name' => 'ProduitController',
        ]);
    }

    public function creationProduit(Request $request): Response
    {
        $produit = new Produit();
        $form = $this->createForm(ProduitType::class, $produit);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            if(!empty($produit->getImage()))
            {
                $fileName = $this->generateUniqueFileName().'.jpeg';
                $file = new UploadedFile($produit->getImage(), $fileName);
            
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
                $produit->setImage($fileName);

            }
            else {
                $produit->setImage('6bca0f32d445f16e2a3e7730035a1e12.jpeg');
            }
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($produit);
            $entityManager->flush();
        return $this->redirectToRoute('creationProduit');

        
        }

        return $this->render('produit/admin_creationProduit.html.twig', [
            'produit' => $produit,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
    *  @Route("/produit/{id}", name="produit", requirements={"id"="\d+"})
    */

    public function showProduit($id, Request $request)
    {
        $entityManager = $this->getDoctrine()->getManager();
        $produit= $entityManager->getRepository(Produit::class)->find($id);

        
        if(!$produit)
        {
            throw $this->createNotFoundException('Aucun produit ne correspond');
        }
        return $this->render ('produit/produit.html.twig', ['produit'=>$produit]);
    }

    // récupérer des éléments(id, titre, contenu, created) dans le stockage des class, ici Article
    public function showAllProduits()
     {
        $entityManager = $this->getDoctrine()->getRepository(Produit::class);
        // on récupère tous les éléments via findAll dans un tableau nommé 'articles'
        $produits = $entityManager->findAll();
        //renvoi les éléments récupérés pour les afficher dans la page articles.html.twig
        return $this->render ('produit/produits.html.twig', ['produits'=>$produits]);
     }

     /**
    *  @Route("/admin_produitsListe", name="produitsListe")
    */
     public function produitsListe()
     {
        $entityManager = $this->getDoctrine()->getRepository(Produit::class);
        // on récupère tous les éléments via findAll dans un tableau nommé 'articles'
        $produits = $entityManager->findAll();

        return $this->render ('produit/admin_produitsListe.html.twig', ['produits'=>$produits]);

     }
    
     
     public function modifProduit(Request $request, Produit $produit)
     {
        $form = $this->createForm(ProduitType::class, $produit);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            if(!empty($produit->getImage()))
            {
                $fileName = $this->generateUniqueFileName().'.jpeg';
                $file = new UploadedFile($produit->getImage(), $fileName);
            
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
                $produit->setImage($fileName);
            }
            else {                
                $produit->setImage('6bca0f32d445f16e2a3e7730035a1e12.jpeg');
            }
            
            $em->flush();            
        }

        return $this->render('produit/admin_modifProduit.html.twig', [
            'produit' => $produit,
            'form' => $form->createView(),
        ]);
     }



    public function recherche(Request $request)
    {
        $form = $this->createForm(RechercheType::class);
        $form->handleRequest($request);

        // if ($form->isSubmitted() && $form->isValid()){
            
        //     $entityManager=$this->getDoctrine()->getManager();        
        //     $produits = $entityManager->getRepository(Produit::class)->findBy(['produit'=>$recherche]);
        //     var_dump($produits);
        //     die();

        //     return $this->render('produit/recherche.html.twig', ['produits'=>$produits]);
        // }
        return $this->render('produit/form_recherche.html.twig',[
            'form' => $form->createview()]);
    }


    public function rechercheTraitement(Request $request)
    {   
        $form = $this->createForm(RechercheType::class);
        if($request->getMethod()== 'POST'){
            
            $form->handleRequest($request);
            // echo $form['produit']->getData();
            $entityManager=$this->getDoctrine()->getManager();        
            $produits = $entityManager->getRepository(Produit::class)->recherche($form['produit']->getData());
            return $this->render('produit/produits.html.twig', ['produits'=>$produits]);
        }
        
        
        // var_dump($produits);
        // die();

        // echo $produits->getProduit();
        // die();

        // return $this->render('produit/produits.html.twig', ['produits'=>$produits]);
        return $this->redirectToRoute('produits');
       
       
    }

    public function recupQte(Request $request)
     {
        $form = $this->createForm(ajoutQteType::class);
        $form->handleRequest($request);

        return $this->render('produit/form_ajoutQte.html.twig',[
            'form' => $form->createview()]);
     }

     public function ajoutQte(Request $request, $id)
     {
        $form = $this->createForm(ajoutQteType::class);
        if($request->getMethod()== 'POST'){
            
            $form->handleRequest($request);
            // echo $form['qte']->getData();
            $qte = $form['qte']->getData();

            // dump($qte);
            // die();

            $session = $request->getSession();
            if (empty($session->get('panier')))
                $panier = array();
            else
                $panier = $session->get('panier');
            
            $panier = (is_array($panier))?$panier:array();
            
            if (array_key_exists($id, $panier)) {
                $panier[$id]["qte"] += $qte;
                $session->set('panier', json_encode($panier));
                
            } 
            else 
            {
                // Recuperation du produit
                $em = $this->getDoctrine()->getManager();
                $produit = $em->getRepository(Produit::class)->findOneBy(array("id" => $id));
                $panier[$id] = array("id" => $id, "qte" => 1, "produit" => $produit->getProduit(), "detail" => $produit->getDetail(), "prixHT" => $produit->getPrixHT(),"image" => $produit-> getImage());
                
                $session->set('panier', json_encode($panier));
            }
            // var_dump($panier[$id]);
            // die();
            $session->set('panier',$panier);
                    
            return $this->redirect($this->generateUrl('panier'));
                
                return $this->render('panier/panier.html.twig', ['qte' => $qte]);
            }
            
        
        // var_dump($produits);
        // die();

        // echo $produits->getProduit();
        // die();

        // return $this->render('produit/produits.html.twig', ['produits'=>$produits]);
        return $this->redirectToRoute('produits');
     }



}
